type Notification = record {
  receiver_id : text;
  notification_type : NotificationType;
  sender_id : text;
};
type NotificationType = variant { Like };
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : UserProfileCreationInfo; Err : text };
type Result_2 = variant { Ok : vec text; Err : text };
type UserProfileCreationInfo = record {
  created_at : nat64;
  user_id : text;
  creator_principal : principal;
  params : UserProfileParams;
};
type UserProfileParams = record {
  age : opt nat64;
  dob : opt text;
  occupation : opt text;
  height : opt text;
  mobile_number : opt text;
  diet : opt text;
  travel : opt vec text;
  name : opt text;
  pets : opt text;
  outdoor_activities : opt vec text;
  min_preferred_age : opt nat64;
  email : opt text;
  smoking : opt text;
  drinking : opt text;
  introduction : opt text;
  art_and_culture : opt vec text;
  preferred_location : opt text;
  gender : opt text;
  interests_in : opt text;
  preferred_gender : opt text;
  gender_pronouns : opt text;
  looking_for : opt text;
  general_habits : opt vec text;
  sports : opt vec text;
  religion : opt text;
  movies : opt vec text;
  location : opt text;
  zodiac : opt text;
  hobbies : opt vec text;
  max_preferred_age : opt nat64;
  images : opt vec text;
};
service : {
  create_an_account : (UserProfileParams) -> (Result);
  delete_an_account : (text) -> (Result);
  get_an_account : (text) -> (Result_1) query;
  get_matched_profiles : (text) -> (vec text) query;
  get_user_notifications : (text) -> (vec Notification) query;
  like_and_check_match : (text, text) -> (bool);
  like_profile : (text, text) -> ();
  send_like : (text, text) -> (text);
  update_an_account : (text, UserProfileParams) -> (Result);
  who_liked_my_profile : (text) -> (Result_2) query;
}
